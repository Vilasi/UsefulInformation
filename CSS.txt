INLINE STYLES: For writing CSS code directly in an HTML document
The "style" attribute can be added directly to the opening tag.
	After the attribute is added, it can be set equal to the CSS style you want to apply.

	<p style="color: red;">I'm learning to code!</p>

	The style attribute is set equal to color: red;

	These can be added indefinitely, seperated by a semi colon ; 
	
	<p style="color: red; font-size: 20px;">I'm learning to code!</p>



THE <style> TAG: A dedicated section for CSS code.

	This must be placed within the <head>  
					<style>
					</style>
				       </head>

	An example of changing the font of paragraphs in the HTML file:
					<style>
   					 p{
     				            font-family: Arial;
  					  }
    
 					 </style>


				HE STYLE.CSS FILE:

To keep code types separated, a .css file can be linked to from within the HTML file.

<link> : Used to link to the .css

You can use the <link> element to link HTML and CSS files together. The <link> element must be placed within the head of the HTML file. It is a self-closing tag and requires the following three attributes:

    href — like the anchor element, the value of this attribute must be the address, or path, to the CSS file.

    type — this attribute describes the type of document that you are linking to (in this case, a CSS file). The value of this attribute should be set to text/css.

    rel — this attribute describes the relationship between the HTML file and the CSS file. Because you are linking to a stylesheet, the value should be set to stylesheet.

	For Example: <link href="https://www.codecademy.com/stylesheets/style.css" type="text/css" 				rel="stylesheet">

	If stored in the same folder, the href can link to a relative path
	IE href="./style.css"


CSS SELECTORS: For selecting HTML elements to be affected.
	The css selector will match the HTML tag.

<p> : Paragraphs 
	p {
	}

HTML tags can have have attributes. For example class
	<p class="brand">Sole Shoe Company</p>

	CSS can select these attributes

	To select "brand" we can write, in CSS

	.brand {
	}

the period (.) is necessary


CSS can set different styles to the same item by selecting multiple classes.
	For example, in HTML <h1 class="green bold">...</h1>

    ...then, in CSS 

		.green {
  		   color: green;
		}

		.bold {
                   font-weight: bold;
		}

	The different classed will be separated by a space within the opening tag.


ID NAME: For uniquely styling HTML elements (no matter what classes are applied to the element)

	<h1 id="large-title"> ... </h1>

To select this in CSS, a # is used.

	#large-title {
	}
->Don't apply the same ID to different elements.




			DIFFERENCE BETWEEN TAGS CLASSES AND IDs

	Classes may be applied to many HTML elements. 
	IDs are applied uniquely to a single element 

	  Classes override Tags

	  IDs override classes and tags


				CHAINING SELECTORS

	An HTML element can have two or more CSS selectors at 
	the same time.
		This is done by combining multipe selectors.

				
				h1.special {
	
				}


		In this code, only the h1 elements that have a class
		of special would be selected.

		ID is still a more specific selector. 



				 NESTED ELEMENTS

	CSS can select nested elements within a selected element.

	Take this code for example:

	
	<ul class='main-list'>
 	 <li> ... </li>
	  <li> ... </li>
 	 <li> ... </li>
	</ul>					The <li> are nested
						withing the <ul>



	The nested <li> elements are selected with this CSS:


	.main-list li {
	
	}

				->Note the Space in
				between the selectors.
	


	-> A chained selector,   p.main   and   .main p   would have the same specificity






					!important

!important is the only selector which is more specific than an ID
	
	The syntax looks like:


				p {
				  color: blue !important;
				}


				.main p {
 				  color: red;
				}


	-> Since !important is used on the p selectos'c color attribute,
	   all p elements will appear blue, even though there is a more 
	   specific    .main p    selector that sets the color attribute
           to red.


	-> The !important tag is only useful if something must remaine the 
	   same forever and throughout all possible future updates
		-> It is not advisable to use this tag.




				Applying the Same Style 
					  to
			          Multiple Selectors



Consider this code:

			h1 {
 			 font-family: Georgia;
			}

			.menu {
 			 font-family: Georgia;
			}


Two different selectors are being used to apply the same effect.
This could be done more consicely, by:


			h1,
			.menu {
			 font-family: Georgia;
			}


		->By separating the CSS selectors with a comma, 
		  both the h1 and the .menu elements will receive 
		  the font-family: Georgia styling.






One common way to keep our CSS concise is via proper utilization of “inheritance”. Within CSS, the computed values of many properties get inherited from ancestor elements. We can use this fact to reduce the number of declarations we write. For example, if I want most of the text on my page to be 20px I can declare font-size: 20px on the html selector. As <html> is the root element and the font-size property is inheritable, all text for this page will be 20px. In cases where we want to deviate from this 20px norm, we can use a selector with a higher specificty to target the element whose font-size we want to override.
