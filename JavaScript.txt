															DATA TYPES:

Numbers:

0-9

Infinity, -Infinity

NaN

	NaN will propagate through an expression, and will return itself 
		as opposed to an error.










															STRINGS:

Must be inside of quotes.

""  &  ''   both serve identically.

``          (backticks) can be used to embed something else, such that
		`Two plus two equals ${2 + 2}`;

A string may be a single character eg. (c)


If an error such as 

	unterminated string literal

Go back through and make sure all strings are contained within quotation marks.


The Same type of quotation marks that were used to open the string cannot be contained 
	within the string itself.

	eg
	var bigmouth = 'I've got no right to take my place...';

	This will retrun an error.

This can be overcome by "escaping" the 	character with a backslash \

	var bigmouth = 'I\'ve got no right to take my place...';

	bigmouth; "I've got no right to take my place..."



The Number object can be used to convert a string to a number.

	var myString = '123';
	var myNum = Number(myString);
	typeof myNum;


toString() will convert a number to a string:

	var myNum = 123;
	var myString = myNum.toString();
	typeof myString;









															STRINGS:
															METHODS AND PROPERTIES



															LENGTH

String Length:

The Length Property returns the length of a string:

	var txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	var sln = txt.length; 





															INDEXOF

Finding a String in a String:

The indexOf() returns the index of (the position of) the first occurance of a specified text
in a string.

	var str = "Please locate where 'locate' occurs!";
	var pos = str.indexOf("locate"); \\ 7

The lastIndexOf() method returns the index of the last occurrence of a specified text in a string:





This is similar to search()

	
    The search() method cannot take a second start position argument.
    The indexOf() method cannot take powerful search values (regular expressions).








															EXTRACTING

3 Ways

    slice(start, end)
    substring(start, end)
    substr(start, length)

This example slices out a portion of a string from position 7 to position 13: 

	var str = "Apple, Banana, Kiwi";
	ar res = str.slice(7, 13); \\ Banana

If the numbers in slice() are negative, it will count from the end of the string.

substring() is the same, but it can't accept negative numbers.

substr() is similar to slice(), but the second numbe specifies the length 
what will be cut out after the starting point of the first number

	var str = "Apple, Banana, Kiwi";
	var res = str.substr(7, 6); \\ Banana





															REPLACE

replace() replaces a value in a string with something else.
This does not change the orignal string, but returns a new one.

	str = "Please visit Microsoft!";
	var n = str.replace("Microsoft", "W3Schools");

To replace case insensitive, use a regular expression with an /i flag (insensitive):

	str = "Please visit Microsoft!";
	var n = str.replace(/MICROSOFT/i, "W3Schools");

To replace all instances globally within a string, use a /g flag

	str = "Please visit Microsoft and Microsoft!";
	var n = str.replace(/Microsoft/g, "W3Schools");




															CONVERT TO UPPERCASE
																or lowercase

toUpperCase()
toLowerCase()

	var text1 = "Hello World!";       // String
	var text2 = text1.toUpperCase();  // text2 is text1 converted to upper 




															CONCATENATION METHOD

concat()    this joins two or more strings

	var text1 = "Hello";
	var text2 = "World";
	var text3 = text1.concat(" ", text2); // Hello World

This can be used instead of the + operator

This would return the same thing as the above

	var text = "Hello" + " " + "World!";
	var text = "Hello".concat(" ", "World!");  	






															REMOVING WHITE SPACE

String.trim()  trims off excess white space at the start and end of a string	








															EXTRACTING STRING CHARACTERS

charAt(position)

	var str = "HELLO WORLD";
	str.charAt(0);            // returns H 


charCodeAt(position)

Returns the unicode of the character at a specified index in a string:

The method returns a UTF-16 code (an integer between 0 and 65535).

	var str = "HELLO WORLD";

	str.charCodeAt(0);         // returns 72 


Property access []


	var str = "HELLO WORLD";
	str[0];                   // returns H 





															CONVERTING A STRING
															TO AN ARRAY

split()

	var txt = "a,b,c,d,e";   // String
	txt.split(",");          // Split on commas
	txt.split(" ");          // Split on spaces
	txt.split("|");          // Split on pipe 


If the separator is ommitted, it will return the whole string as an array in index[0].

If the separator is "" the returned array will be an array of single characters.



























															BOOLEAN:

True or False

	let nameFieldChecked = true; // yes, name field is checked
	let ageFieldChecked = false; // no, age field is not checked


Booleans also come as the result of comparisons, eg:
	
	let isGreater = 4 > 1;

	alert( isGreater ); // true (the comparison result is "yes")









															NULL:

Empty. Nothing. Refers to Nothing Else. It's just an empty nothing.

	let age = null;

		The value of age is unknown











															UNDEFINED:

A value is not assigned

If a variable is declared but not assigned a value,
	the value is undefined

	let x;

	alert(x); // shows "undefined"

Technically, you can do

	let x = 123;

	x = undefined;

	alert(x); // "undefined"

It is advisable to not do this, and to instead assign a value of "null"
to variables that don't have a value.

Undefined can be used as a check to see if a variable has a value.









															OBJECTS & SYMBOLS

object is a non-primitave data type used to store lareger collections of data.

The symbol type is used to create unique lables for objects.














															TYPEOF

The typeof operator returns the type of the argument.

It's useful for processing values of different types differently,
	or for a quick check of what datatype a variable is.

Two forms of Syntax:
	
    As an operator: typeof x

    Function style: typeof(x)

	These both work exactly the same


Examples:

	typeof undefined // "undefined"

	typeof 0 // "number"

	typeof true // "boolean"

	typeof "foo" // "string"

	typeof Symbol("id") // "symbol"

	typeof Math // "object"  (1)

	typeof null // "object"  (2)

	typeof alert // "function"  (3)





















															CONDITIONALS




															COMPARISONS



A comparison:    <    >    >=    <=    ==      returns a boolean (true, false)

This can be assigned to a variable:

	let result = 5>4; // true




Strings can be compared just as well as numbers

	alert( 'Z' > 'A' ); // true

	alert( 'Glow' > 'Glee' ); // true

	alert( 'Bee' > 'Be' ); // true


	
    1. Compare first characters of both strings.
    2. If the first one is greater(or less), then the first string is greater(or less) than the second. Weâ€™re done.
    3. Otherwise if first characters are equal, compare the second characters the same way.
    4. Repeat until the end of any string.
    5. If both strings ended simultaneously, then they are equal. Otherwise the longer string is greater.

Lowercase letters have a higher value than uppercase. Think of the order
Words would be in in a dictionary.



When variables of different types are compared, they are converted to numbers.

	alert( '2' > 1 ); // true, string '2' becomes a number 2
	alert( '01' == 1 ); // true, string '01' becomes a number 1


For Booleans:

	true == 1

	false == 0

It is possible that at the same time:

    Two values are equal.
    One of them is true as a boolean and the other one is false as a boolean.


	let a = 0;
	alert( Boolean(a) ); // false

	let b = "0";
	alert( Boolean(b) ); // true

	alert(a == b); // true!



															STRICT EQUALITY

===

Strict Equality: There is no type conversion with this.


0 == false

"" == false

This is because operands of different types are converted to numbers 
through the equality operator ==





















															






























